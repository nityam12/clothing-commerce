{"ast":null,"code":"var _jsxFileName = \"/home/titangtx/react learn/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionPageContainer from \"../collection/collection.container\";\nimport { connect } from \"react-redux\";\nimport CollectionOverviewContainer from \"../../components/collections-overview/collection-overview.container\";\nimport { createStructuredSelector } from \"reselect\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\"; // import {\n//   selectIsCollectionFetching,\n//   selectIsCollectionLoaded,\n// } from \"../../redux/shop/shop.selector\";\n// import WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n// const CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // constructor(){\n  //   super();\n  //   this.state={\n  //   };\n  // }\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n    // console.log(collectionRef);\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapShot) => {\n    //     // console.log(snapShot.data());\n    //     const collectionMap = convertCollectionsSnapshotToMap(snapShot);\n    //     updateCollections(collectionMap);\n    //     this.setState({ loading: false });\n    //     // console.log(collectionMap);\n    //   }\n    // );\n    //promise\n    // collectionRef.get().then((snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // });\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionLoaded\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      component: CollectionOverviewContainer // render={(props) => (\n      //   <CollectionOverviewWithSpinner\n      //     isLoading={!isCollectionLoaded}\n      //     {...props}\n      //   />\n      // )}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}:collectionId`,\n      component: CollectionOverviewContainer,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionLoaded\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  // isCollectionFetching: selectIsCollectionFetching,\n  isCollectionLoaded: selectIsCollectionLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/titangtx/react learn/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","CollectionPageContainer","connect","CollectionOverviewContainer","createStructuredSelector","fetchCollectionsStartAsync","ShopPage","Component","componentDidMount","props","render","match","isCollectionLoaded","path","mapStateToProps","selectIsCollectionLoaded","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,OAAOC,uBAAP,MAAoC,oCAApC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,2BAAP,MAAwC,qEAAxC;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,0BAAT,QAA2C,+BAA3C,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;AAEA,MAAMC,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAuC;AACrC;AACA;AACA;AAEA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAiC,KAAKI,KAA5C;AACAJ,IAAAA,0BAA0B;AAC3B;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAgC,KAAKH,KAA3C;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAFtB;AAGE,MAAA,SAAS,EAAEV,2BAHb,CAIE;AACA;AACA;AACA;AACA;AACA;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAYE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEQ,KAAK,CAACE,IAAK,eADtB;AAEE,MAAA,SAAS,EAAEV,2BAFb;AAGE,MAAA,MAAM,EAAGM,KAAD,iBACN,oBAAC,yBAAD;AACE,QAAA,SAAS,EAAE,CAACG;AADd,SAEMH,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF;AAyBD;;AA7DoC;;AAgEvC,MAAMK,eAAe,GAAGV,wBAAwB,CAAC;AAC/C;AACAQ,EAAAA,kBAAkB,EAAEG;AAF2B,CAAD,CAAhD;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,0BAA0B,EAAE,MAAMY,QAAQ,CAACZ,0BAA0B,EAA3B;AADF,CAAf,CAA3B;;AAIA,eAAeH,OAAO,CAACY,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport CollectionPageContainer from \"../collection/collection.container\";\n\nimport { connect } from \"react-redux\";\nimport CollectionOverviewContainer from \"../../components/collections-overview/collection-overview.container\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\n\n// import {\n//   selectIsCollectionFetching,\n//   selectIsCollectionLoaded,\n// } from \"../../redux/shop/shop.selector\";\n\n// import WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n\n// const CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\n\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // constructor(){\n  //   super();\n  //   this.state={\n\n  //   };\n  // }\n\n  // unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n    // console.log(collectionRef);\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapShot) => {\n    //     // console.log(snapShot.data());\n    //     const collectionMap = convertCollectionsSnapshotToMap(snapShot);\n    //     updateCollections(collectionMap);\n    //     this.setState({ loading: false });\n    //     // console.log(collectionMap);\n    //   }\n    // );\n    //promise\n    // collectionRef.get().then((snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // });\n    const { fetchCollectionsStartAsync } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const { match, isCollectionLoaded } = this.props;\n\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          component={CollectionOverviewContainer}\n          // render={(props) => (\n          //   <CollectionOverviewWithSpinner\n          //     isLoading={!isCollectionLoaded}\n          //     {...props}\n          //   />\n          // )}\n        />\n        <Route\n          path={`${match.path}:collectionId`}\n          component={CollectionOverviewContainer}\n          render={(props) => (\n            <CollectionPageWithSpinner\n              isLoading={!isCollectionLoaded}\n              {...props}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  // isCollectionFetching: selectIsCollectionFetching,\n  isCollectionLoaded: selectIsCollectionLoaded,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}